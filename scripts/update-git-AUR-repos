#!/usr/bin/env bash

function finish_script() {
	echo -e "\n$0\nProcess completed with code $?"
	notify-send -u normal "$0" "Process completed with code $?"
}

trap finish_script EXIT

# Choose git/AUR repository directory
repos_path="${XDG_DOCUMENTS_DIR:-$HOME/Documents}"
repos_arr=($(find "$repos_path" -maxdepth 1 -type d))

function throw_error() {
	echo -e "Error: $2\nSkipping..."
	notify-send -u critical "$1" "Error: $2\nSkipping..."
}

for repo in "${repos_arr[@]}"; do
	cd "$repo"
	if [[ -d '.git' ]]; then
		echo -e "\nUpdating: $repo"
		check_branch="$(git branch | sed -n 's/^\*\s\+\([^(]\+\)/\1/p')"
		check_master="$(git branch | sed -n 's/^\*\?\s\+\(master\|main\)/\1/p')"
		check_remotes=( $(git branch --all | \
		    sed -n 's:^\s\+remotes\/\([^/]\+\)\/.*:\1:p' | uniq) )

		[[ -z $check_branch  ]] &&
		    throw_error "$repo" "no branch checked out" &&
		    continue
		[[ -z $check_master  ]] &&
		    throw_error "$repo" "no master branch" &&
		    continue
		[[ -z $check_remotes ]] &&
		    throw_error "$repo" "no remote URLs" &&
		    continue

		# Go to master/main branch after saving current state
		if [[ $check_branch != $check_master ]]; then
			stash_message="${check_branch}_$(date +'%Y%m%d_%H%M%S%z')"
			git stash push -um "$stash_message" || echo "Nothing to stash"
			git checkout -q "$check_master"
		fi

		# Update pull fast-forward config
		[[ $(git config pull.ff) != 'only' ]] && git config pull.ff only

		# Update from upstream, or origin
		if [[ ${check_remotes[@]} == *upstream* ]]; then
			git pull --force upstream "$check_master"
		elif [[ ${check_remotes[@]} == *origin* ]]; then
			git pull --force origin "$check_master"
		else
			throw_error "$repo" "no remotes named upstream or origin"
		fi

		# Check for pull failure
		if [[ $? != 0 ]]; then
			throw_error "$repo" "remote pull could not be fast-forward"
		fi

		# Resume worktree back to previous branch
		if [[ $check_branch != $check_master ]]; then
			git checkout -q "$check_branch"
			if [[ $(git stash list) == *${stash_message}* ]]; then
				stash_commit="$(git stash list | \
				    sed -n "s/^\([^:]\+\):\s\+[^:]\+:\s\+$stash_message$/\1/p")"
				git stash apply "$stash_commit"
				echo "Worktree on $check_branch restored"
				echo "Run \`git stash drop $stash_commit' to remove it"
			fi
		fi
	fi
done

